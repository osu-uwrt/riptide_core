clear;
clear global;

%read from config
speed_of_sound = 1500;
pinger_depth = -1.0;

%initialize node
global node;
node = ros2node("/acoustics_node");

%intialize tf2
global tftree;
tftree = ros2tf(node);

%initialize transform array
global measurements;

%get acoustic pod transform
global origin_to_port_transform
global port_to_startboard_transform

global initial_pinger_estimate
initial_pinger_estimate = [4.0,1.8,-1.1,0.0,0.0,0.0];

transforms_recieved = false;
while(transforms_recieved == false)
    %loop until transforms become available

    try
        origin_to_port_transform = getTransform(tftree, "talos/acoustics_port_link", "talos/origin");
        port_to_startboard_transform = getTransform(tftree, "talos/acoustics_starboard_link", "talos/acoustics_port_link");

        transforms_recieved = true;
    catch
        pause(1);
        disp("Waiting for acoustic transforms to become available!");
    end
end


%initialize publishers and subscribers
pub = ros2publisher(node, "/test_matlab", "std_msgs/UInt8");

%add subscriber to add to measurements
delta_t_sub = ros2subscriber(node, "/talos/acoustics/delta_t", @delta_t_callback);

%add rate function to analyze measurements
r = ros2rate(node, 1);
reset(r)

x = 0;
estimated_pinger_position = initial_pinger_estimate(1:3)';
while(x < 1)
    estimated_pinger_position = run_analysis(port_to_startboard_transform, origin_to_port_transform, measurements, pinger_depth, estimated_pinger_position, speed_of_sound)
    waitfor(r)
end

function [estimated_pinger_position] = run_analysis(port_to_startboard_transform, origin_to_port_transform, measurements, pinger_depth, pinger_pose, speed_of_sound)
    %wait until at least five samples have been taken
    points_to_use = 15;
    
    if(max(size((measurements))) > points_to_use)
        disp("Running Analysis")
        
        %get base vector translation
        hydrophone_base_vector = [port_to_startboard_transform.transform.translation.x; port_to_startboard_transform.transform.translation.y; port_to_startboard_transform.transform.translation.z];

        %origin to port vector
        origin_to_port_vector = [origin_to_port_transform.transform.translation.x; origin_to_port_transform.transform.translation.y; origin_to_port_transform.transform.translation.z];

        %determine the points to use
        num_points_saved = max(size(measurements));

        points_index_array = linspace(num_points_saved - points_to_use + 1, num_points_saved, points_to_use);
        counter = points_to_use - 1;
        point_seperation = .1;
        counter2 = num_points_saved - 1;
        while(counter > 0 && counter2 > 0)

            auv_position_test = [measurements(counter2).auv_origin.transform.translation.x;measurements(counter2).auv_origin.transform.translation.y;measurements(counter2).auv_origin.transform.translation.z];
            auv_position_previous = [measurements(counter + 1).auv_origin.transform.translation.x;measurements(counter + 1).auv_origin.transform.translation.y;measurements(counter + 1).auv_origin.transform.translation.z];

            %if the points are sperated by enough distance
            if(norm(auv_position_test - auv_position_previous) > point_seperation)
                points_index_array(counter) = counter2;
                
                counter = counter - 1;
            end

            counter2 = counter2 - 1;
        end

        %only run if the specified number of points was found
        if(counter == 0)

            %assemble poses matrix and delta ds
            poses = zeros(7, points_to_use);
            delta_ds = zeros(points_to_use, 1);
            for counter = 1:points_to_use
                auv_position = [measurements(points_index_array(counter)).auv_origin.transform.translation.x;measurements(points_index_array(counter)).auv_origin.transform.translation.y;measurements(points_index_array(counter)).auv_origin.transform.translation.z];
                auv_rotation = [measurements(points_index_array(counter)).auv_origin.transform.rotation.w;measurements(points_index_array(counter)).auv_origin.transform.rotation.x;measurements(points_index_array(counter)).auv_origin.transform.rotation.y;measurements(points_index_array(counter)).auv_origin.transform.rotation.z];
                
                %calculate the port hydrophones pose in world frame
                poses(:, counter) = [auv_position + quat2rotm(auv_rotation') * origin_to_port_vector; auv_rotation];
    
                %convert delta_t to delta ds
                delta_ds(counter) = measurements(points_index_array(counter)).delta_t * speed_of_sound;
            end
    
            disp(poses)
            disp(delta_ds  )
    
            estimated_pinger_position = estimate_pinger_position(poses, delta_ds, pinger_pose, hydrophone_base_vector);
            %estimated_pinger_position(3) = pinger_depth;
        else
            estimated_pinger_position = pinger_pose;

            disp("Points to close")
        end
    else
        estimated_pinger_position = pinger_pose;
    end

end


function delta_t_callback(message)
    %introduce global variables
    global tftree;
    global measurements;

    try
        pause(.1)
        
        %get the transform at the time of the measurement
        map_to_origin_transform = getTransform(tftree, "map", 'talos/origin', message.header.stamp);
    
        %fill out measurement data struct
        measurement = struct();
        measurement.delta_t = message.vector.x;
        measurement.frequency = message.vector.y;
        measurement.stamp = message.header.stamp;
        measurement.auv_origin = map_to_origin_transform;

        if(isempty(measurements))
            measurements = [measurement];

        else
            measurements(end+1) = measurement;
        end

    catch
        disp("Failed to get transform")

        %tftree.AvailableFrames
    end

end 