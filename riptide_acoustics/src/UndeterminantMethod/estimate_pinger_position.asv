function estimate = estimate_pinger_position(poses, delta_s, previous_estimate, hydrophone_base_vector)
    
    %transform so that the hydrophone base vector is parallel to the y axis
    characteristic_distance = norm(hydrophone_base_vector);

    %from transform to positive y
    unit_base_vector = hydrophone_base_vector / norm(hydrophone_base_vector);
    cos_transform = sum(unit_base_vector .* [0,1,0]);
    cross_transform = cross(unit_base_vector, [0,1,0]);
    skew_sym_cross = [0, -cross_transform(3), cross_transform(2);
                        cross_transform(3), 0, -cross_transform(1);
                        -cross_transform(2), cross_transform(1),0];
    base_vector_rotm = eye(3) + skew_sym_cross + skew_sym_cross^2 / (1 + cos_transform);

    num_points = length(poses(1,:));
    
    points = zeros(3, num_points);
    
    %weght function
    weight_func = @(n) 1;
    weights = zeros(1, num_points);
    previous_weight = .01;
    
    
    for counter = 1:num_points
    
        %from ([0,0,0,0,0,0,0]) to pose
        rotm = quat2rotm(poses(4:7, counter)');
        transform = poses(1:3, counter);
    
        %transform so the origin is at ([0,0,0,0,0,0,0])
        previous_point_transformed = base_vector_rotm * rotm' * (previous_estimate - transform)
        
        [closest_point, dist] = calculate_distance_from_solve(delta_s(counter), characteristic_distance, previous_point_transformed);
        closest_point = closest_point';
        points(:,counter) = (rotm * base_vector_rotm' * closest_point) + transform;
    
        weights(counter) = weight_func(dist);
    end
    
    %find the center "mean" of all of the points
    center_point = sum(points, 2) / num_points;

    %calculate the standard deviation (standard distance from the center)
    sum_of_distance2 = 0;
    distances_from_center = zeros(num_points, 1);
    for counter = 1:num_points
        distances_from_center(counter) = norm(center_point - points(:,counter));
        sum_of_distance2 = sum_of_distance2 + distances_from_center(counter)^2;
    end
    std_dev_from_center = sqrt(sum_of_distance2 / (num_points - 1));

    %if greater than 1 std dev - do not include in estimate
    weights = weights .* (std_dev_from_center > distances_from_center)';

    % %plot points
    % figure;
    % plot3(points(1,:), points(2,:), points(3,:), "b*")


    %find center of all points
    estimate = (points * weights' + (previous_estimate) * previous_weight) / (sum(weights) + previous_weight);

end